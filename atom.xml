<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[mackxu的博客]]></title>
  <subtitle><![CDATA[学而时习之不亦说乎]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://mackxu.github.io/"/>
  <updated>2016-04-04T04:29:31.000Z</updated>
  <id>http://mackxu.github.io/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[JS设计模式之策略模式(二)]]></title>
    <link href="http://mackxu.github.io/2016/04/04/js-pattern-strategy2/"/>
    <id>http://mackxu.github.io/2016/04/04/js-pattern-strategy2/</id>
    <published>2016-04-04T03:49:58.000Z</published>
    <updated>2016-04-04T04:29:31.000Z</updated>
    <content type="html"><![CDATA[<p>利用策略模式来校验用户是否输入了合法的数据<br><a id="more"></a></p>
<h2 id="案例">案例</h2><p>假设我们正在编写一个注册页面。     </p>
<pre><code><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"#"</span> <span class="attribute">id</span>=<span class="value">"registerForm"</span> <span class="attribute">name</span>=<span class="value">"registerForm"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>请输入用户名: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span> /&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>请输入密码: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"password"</span> /&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>请输入手机号: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"phoneNumber"</span> /&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</code></pre><p>在点击注册按钮前，有如下几条校验逻辑：</p>
<ul>
<li>用户名不能为空</li>
<li>密码长度不能小于6位</li>
<li>手机号码必须符合格式</li>
</ul>
<h2 id="表单校验">表单校验</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* -------------------- strategy class -------------------- */</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    isNonEmpty: <span class="function"><span class="keyword">function</span>(<span class="params">value, errMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (value === <span class="string">''</span>) &amp;&amp; errMsg;</span><br><span class="line">    &#125;,</span><br><span class="line">    minLength: <span class="function"><span class="keyword">function</span>(<span class="params">value, length, errMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (value.length &lt; length) &amp;&amp; errMsg;</span><br><span class="line">    &#125;,</span><br><span class="line">    isMobile: <span class="function"><span class="keyword">function</span>(<span class="params">value, errMsg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ( <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>.test(value) ) || errMsg;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------------- Validator class -------------------- */</span></span><br><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params">dom, rules</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, rule; rule = rules[i++]; ) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">rule</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> strategyAry = rule.strategy.split(<span class="string">':'</span>);         <span class="comment">// 把strategy和参数分开</span></span><br><span class="line">            <span class="keyword">var</span> errorMsg = rule.errorMsg;</span><br><span class="line"></span><br><span class="line">            self.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;                                        <span class="comment">// 把校验的步骤用空函数包装起来, 并放入cache</span></span><br><span class="line">                <span class="keyword">var</span> strategy = strategyAry.shift();                     <span class="comment">// 获取strategy</span></span><br><span class="line">                strategyAry.unshift(dom.value);                             <span class="comment">// 把input的value添加进参数列表</span></span><br><span class="line">                strategyAry.push(errorMsg);                                     <span class="comment">// 把errorMsg添加进参数列表</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> strategies[strategy].apply(dom, strategyAry);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)(rule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, validataFunc; validataFunc = <span class="keyword">this</span>.cache[i++]; ) &#123;</span><br><span class="line">        <span class="keyword">var</span> msg = validataFunc.call();      <span class="comment">// 校验rule</span></span><br><span class="line">        <span class="comment">// return msg &amp;&amp; msg;                               // 如果msg有值, 说明校验没有通过</span></span><br><span class="line">        <span class="keyword">if</span>(msg) <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="Client_use">Client use</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validataFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line"></span><br><span class="line">    validator.add(registerForm.username, [&#123;</span><br><span class="line">        strategy: <span class="string">'isNonEmpty'</span>,</span><br><span class="line">        errorMsg: <span class="string">'用户名不能为空'</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        strategy: <span class="string">'minLength:6'</span>,</span><br><span class="line">        errorMsg: <span class="string">'用户名长度不能小于6位'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    validator.add(registerForm.password, [&#123;</span><br><span class="line">        strategy: <span class="string">'minLength:8'</span>,</span><br><span class="line">        errorMsg: <span class="string">'密码长度不能小于8位'</span></span><br><span class="line">    &#125;,]);</span><br><span class="line"></span><br><span class="line">    validator.add(registerForm.phoneNumber, [&#123;</span><br><span class="line">        strategy: <span class="string">'isMobile'</span>,</span><br><span class="line">        errorMsg: <span class="string">'手机号格式不正确'</span></span><br><span class="line">    &#125;,]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> errorMsg = validator.start();</span><br><span class="line">    <span class="keyword">return</span> errorMsg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById(<span class="string">'registerForm'</span>);</span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> errorMsg = validataFunc();</span><br><span class="line">    <span class="keyword">if</span>(errorMsg) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(errorMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>利用策略模式来校验用户是否输入了合法的数据<br>]]>
    
    </summary>
    
      <category term="js" scheme="http://mackxu.github.io/tags/js/"/>
    
      <category term="pattern" scheme="http://mackxu.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS设计模式之策略模式]]></title>
    <link href="http://mackxu.github.io/2016/04/04/js-pattern-strategy/"/>
    <id>http://mackxu.github.io/2016/04/04/js-pattern-strategy/</id>
    <published>2016-04-04T00:20:38.000Z</published>
    <updated>2016-04-04T03:30:04.000Z</updated>
    <content type="html"><![CDATA[<p>策略模式定义：定义一系列的算法，把他们一个个封装起来，并且使它们可以相互交换<br><a id="more"></a></p>
<h2 id="案例">案例</h2><p>公司要根据员工的工资基数和年底的绩效情况发放年终奖。例如，绩效为S的人年终奖有4倍工资，绩效为A的人年终奖有3倍工资，绩效为B的人年终奖有2倍工资。</p>
<h2 id="最初的代码实现">最初的代码实现</h2><pre><code><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span><span class="params">(performanceLevel, salary)</span> </span>{
    <span class="keyword">if</span>(performanceLevel === <span class="string">'S'</span>) {
        <span class="keyword">return</span> salary * <span class="number">4</span>;
    }

    <span class="keyword">if</span>(performanceLevel === <span class="string">'A'</span>) {
        <span class="keyword">return</span> salary * <span class="number">3</span>;
    }

    <span class="keyword">if</span>(performanceLevel === <span class="string">'B'</span>) {
        <span class="keyword">return</span> salary * <span class="number">2</span>;
    }
};

<span class="keyword">var</span> s = calculateBonus(<span class="string">'S'</span>, <span class="number">40000</span>);             <span class="comment">// 160000</span>
<span class="keyword">var</span> b = calculateBonus(<span class="string">'B'</span>, <span class="number">10000</span>);             <span class="comment">// 20000</span>
</code></pre><h2 id="使用策略模式重构代码">使用策略模式重构代码</h2><pre><code><span class="keyword">var</span> strategies = {
    S: <span class="function"><span class="keyword">function</span><span class="params">(salary)</span> </span>{
        <span class="keyword">return</span> salary * <span class="number">4</span>;
    },
    A: <span class="function"><span class="keyword">function</span><span class="params">(salary)</span> </span>{
        <span class="keyword">return</span> salary * <span class="number">3</span>;
    },
    B: <span class="function"><span class="keyword">function</span><span class="params">(salary)</span> </span>{
        <span class="keyword">return</span> salary * <span class="number">2</span>;
    },
};

<span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span><span class="params">(level, salary)</span> </span>{
    <span class="keyword">return</span> strategies[level].call(<span class="keyword">this</span>, salary);
};

<span class="keyword">var</span> sss = calculateBonus(<span class="string">'S'</span>, <span class="number">2000</span>);                <span class="comment">// 8000</span>
<span class="keyword">var</span> bbb = calculateBonus(<span class="string">'B'</span>, <span class="number">500</span>);                 <span class="comment">// 1000</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>策略模式定义：定义一系列的算法，把他们一个个封装起来，并且使它们可以相互交换<br>]]>
    
    </summary>
    
      <category term="js" scheme="http://mackxu.github.io/tags/js/"/>
    
      <category term="pattern" scheme="http://mackxu.github.io/tags/pattern/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[当transition遇到display]]></title>
    <link href="http://mackxu.github.io/2016/01/17/transition-display/"/>
    <id>http://mackxu.github.io/2016/01/17/transition-display/</id>
    <published>2016-01-17T02:56:51.000Z</published>
    <updated>2016-01-17T04:35:15.000Z</updated>
    <content type="html"><![CDATA[<p>实现淡入淡出时，可以使用jQuery的fadeIn()/fadeOut()。使用css3的transition(过渡)也能实现。<br>现在我们借助transition模仿jQuery实现盒子的淡入淡出:<br>通过button的click事件，给div#box添加或删除<code>classname</code>实现效果<br>HTML结构:</p>
<pre><code>&lt;button&gt;动画按钮&lt;/button&gt;
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"box"</span> <span class="property">id</span>=<span class="string">"box"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
</code></pre><h2 id="过渡改变opacity属性值">过渡改变opacity属性值</h2><p>css代码：</p>
<pre><code><span class="class">.box</span> <span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> goldenrod</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">100px</span> auto</span></span>;
    <span class="rule"><span class="attribute">transition</span>:<span class="value"> all <span class="number">1s</span> linear</span></span>;
}</span>
<span class="class">.hide</span> <span class="rules">{ 
    <span class="comment">/* display: none; */</span>
    <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0</span> 
}</span></span></span>
</code></pre><p>JS代码:</p>
<pre><code>var <span class="variable">$box</span> = $(<span class="string">'#box'</span>);
$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="keyword">function</span>() {
    if(<span class="variable">$box</span>.hasClass(<span class="string">'hide'</span>)) {
        <span class="variable">$box</span>.removeClass(<span class="string">'hide'</span>);
    }else {
        <span class="variable">$box</span>.addClass(<span class="string">'hide'</span>);
    }
});
</code></pre><p>在点击按钮后可以看到淡入淡出效果，但是在css代码中解除对display属性注释后，在刷新页面，淡出淡入效果没有了。究其原因在于transition不支持display的none值与其它值之间的过渡，进而影响到盒子对opacity的过渡效果。<br>我们可以按照下面的步骤，实现效果：   </p>
<ul>
<li>当盒子可见时，先实现opacity动画，动画结束后添加<code>display: none</code></li>
<li>当盒子不可见时，首先使其可见<code>display: block</code>，然后执行opacity动画。</li>
</ul>
<h2 id="解决办法">解决办法</h2><p>把<code>opacity: 0</code>从.hide抽离。<br>css代码:  </p>
<pre><code><span class="class">.hide</span> <span class="rules">{ <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>; }</span>
<span class="class">.opacity0</span> <span class="rules">{ <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">0</span></span></span>; }</span>
</code></pre><p>JS代码如下：</p>
<pre><code>var <span class="variable">$box</span> = $(<span class="string">'#box'</span>);
$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="keyword">function</span>() {
    if(<span class="variable">$box</span>.hasClass(<span class="string">'hide'</span>)) {
        <span class="variable">$box</span>.removeClass(<span class="string">'hide'</span>);
        requestAnimationFrame(function() {          // 合适时机执行淡入动画
            <span class="variable">$box</span>.removeClass(<span class="string">'opacity0'</span>);
        });
    }else {
        <span class="variable">$box</span>.addClass(<span class="string">'opacity0'</span>);
        <span class="variable">$box</span>.one(<span class="string">'transitionEnd, webkitTransitionEnd'</span>, function() {
            <span class="variable">$box</span>.addClass(<span class="string">'hide'</span>);                 // 动画结束后, 隐藏盒子
        });
    }
});
</code></pre><p>参考:<br><a href="http://ued.ctrip.com/blog/when-on-transition-display.html" target="_blank" rel="external">http://ued.ctrip.com/blog/when-on-transition-display.html</a><br><a href="http://www.impressivewebs.com/animate-display-block-none/" target="_blank" rel="external">http://www.impressivewebs.com/animate-display-block-none/</a><br><a href="http://oli.jp/2010/css-animatable-properties/" target="_blank" rel="external">http://oli.jp/2010/css-animatable-properties/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>实现淡入淡出时，可以使用jQuery的fadeIn()/fadeOut()。使用css3的transition(过渡)也能实现。<br>现在我们借助transition模仿jQuery实现盒子的淡入淡出:<br>通过button的click事件，给div#box添加或删除<]]>
    </summary>
    
      <category term="CSS3" scheme="http://mackxu.github.io/tags/CSS3/"/>
    
      <category term="transition" scheme="http://mackxu.github.io/tags/transition/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[比较JS文件加载：async和DOM Script]]></title>
    <link href="http://mackxu.github.io/2015/08/20/async-script/"/>
    <id>http://mackxu.github.io/2015/08/20/async-script/</id>
    <published>2015-08-20T02:31:33.000Z</published>
    <updated>2015-08-20T02:31:33.000Z</updated>
    <content type="html"><![CDATA[<p>async与script动态加载都能使文件异步加载，本文叙述它们对页面渲染和load加载的影响方面。<br><a id="more"></a><br>目前我用demo.js作为执行文件操作.代码：</p>
<pre><code><span class="keyword">var</span> now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{ <span class="keyword">return</span> +(<span class="keyword">new</span> <span class="built_in">Date</span>()); }
<span class="keyword">var</span> t_s = now();
<span class="keyword">while</span>(now() - t_s &lt; <span class="number">2000</span>) {  }
</code></pre><p>用sleep.php作为请求文件操作。代码：</p>
<pre><code><span class="php"><span class="preprocessor">&lt;?php</span>
    sleep(<span class="number">3</span>);
    <span class="keyword">echo</span> <span class="string">'var bb'</span>;
<span class="preprocessor">?&gt;</span></span>
</code></pre><h2 id="1-_一般script标签加载">1. 一般script标签加载</h2><pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"demo.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"sleep.php"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><p>在浏览器加载情况: <strong>图1-1. 下载阻塞DomReady</strong> <strong>图1-2. 执行阻塞DomReady</strong><br><img src="http://qnimg.qiniudn.com/140720/1-DOMReady.png" alt=""><strong>图1-1. 下载阻塞DomReady</strong></p>
<p><img src="http://qnimg.qiniudn.com/140720/2-DOMReady.png" alt="">  <strong>图1-2. 执行阻塞DomReady</strong></p>
<h2 id="2-_async属性">2. async属性</h2><p>async是html5中新增的属性，它的作用是能够异步下载脚本文件，不阻塞DOMReady。<br>每一个async属性的脚本都在它下载结束之后立刻执行，同时会在window的load事件之前执行。所以就有可能出现脚本执行顺序被打乱的情况<br>支持async浏览器: Firefox 3.6+, IE 10+, Chrome 2+, Safari 5+, iOS 5+, Android 3+</p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"demo.js"</span> <span class="attribute">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"sleep.php"</span> <span class="attribute">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>   
</code></pre><p>在浏览器中加载的情况：<br><img src="http://qnimg.qiniudn.com/140720/1-async.png" alt=""><strong>图2-1 异步下载 不阻塞DomReady 阻塞load事件</strong> </p>
<p><img src="http://qnimg.qiniudn.com/140720/2-async.png" alt=""><strong>图2-2 执行阻塞load事件</strong></p>
<p><img src="http://qnimg.qiniudn.com/140720/3-ie-async.png" alt=""><strong>图2-3 IE9不支持async属性下载阻塞DomReady</strong></p>
<h2 id="3-_DOM_Script动态加载">3. DOM Script动态加载</h2><p>文档对象模型（DOM）允许您使用 JavaScript 动态创建 HTML 的几乎全部文档内容。<br>script元素与页面其他元素一样，可以非常容易地通过标准 DOM 函数创建：</p>
<pre><code><span class="keyword">var</span> loadScript = <span class="function"><span class="keyword">function</span>(<span class="params">url</span>) </span>{
    <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);
    s.type = <span class="string">'text/javascript'</span>;
    s.async = <span class="string">'true'</span>;
    s.src = url;
    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(s);    
}
<span class="comment">// 加载js文件脚本</span>
loadScript(<span class="string">'sleep.php'</span>);
loadScript(<span class="string">'demo.js'</span>);
</code></pre><p>在浏览器中加载的情况：<br><img src="http://qnimg.qiniudn.com/140720/1-script.png" alt=""><strong>图3-1 下载阻塞load事件</strong></p>
<p><img src="http://qnimg.qiniudn.com/140720/2-script.png" alt=""><strong>图3-2 执行阻塞load事件</strong></p>
<p><img src="http://qnimg.qiniudn.com/140720/3-ie-script.png" alt=""><strong>图3-3 IE9不阻塞load事件</strong></p>
<h2 id="小结">小结</h2><p>async和script动态加载在现代浏览器中加载的情况是一致的。前者使用简单，后在兼容性方面更好。<br>异步加载文件还有很多方法，ajax(会受到同源限制)、iFrame、img…</p>
<p>参考链接：<br><a href="http://ie.microsoft.com/TestDrive/Performance/AsyncScripts/Default.html" target="_blank" rel="external">http://ie.microsoft.com/TestDrive/Performance/AsyncScripts/Default.html</a><br><a href="http://ued.ctrip.com/blog/?p=3121" target="_blank" rel="external">http://ued.ctrip.com/blog/?p=3121</a><br><a href="http://blog.jobbole.com/47304/" target="_blank" rel="external">http://blog.jobbole.com/47304/</a><br><a href="http://www.infoq.com/cn/articles/browser-resource-loading-optimization" target="_blank" rel="external">http://www.infoq.com/cn/articles/browser-resource-loading-optimization</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>async与script动态加载都能使文件异步加载，本文叙述它们对页面渲染和load加载的影响方面。<br>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[templateJS解说]]></title>
    <link href="http://mackxu.github.io/2015/08/19/nano-template/"/>
    <id>http://mackxu.github.io/2015/08/19/nano-template/</id>
    <published>2015-08-19T10:12:36.000Z</published>
    <updated>2015-08-27T03:07:36.000Z</updated>
    <content type="html"><![CDATA[<p>函数内巧用多行注释，实现js模板。<br><a id="more"></a></p>
<h2 id="注释版templateJS函数说明">注释版templateJS函数说明</h2><ul>
<li><strong>template(fn, options)</strong><br>返回有数据填充后的模板字符串<br>是template.render(fn, options)快捷方式，具体详情可以查看<em>template.render()</em></li>
<li><strong>template.compile(fn)</strong><br>返回待填充数据的编译函数。<br>fn: 包含注释文本的函数<br>如果结构多次被使用，可以用变量保存此编译函数，再次使用。 </li>
<li><strong>template.render(fn, options)</strong><br>返回有数据填充后的模板字符串<br>options: 填充数据对象<br>fn: 包含注释文本的函数</li>
<li><strong>template._getTmpl(fn)</strong><br>解析函数内注释文本返回模板字符串<br>fn: 包含注释文本的函数</li>
</ul>
<h2 id="使用实例">使用实例</h2><h3 id="注释函数">注释函数</h3><pre><code><span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{
    <span class="comment">/*!
        ...
        &lt;div class="album-desc"&gt;&lt;% desc %&gt;&lt;/div&gt;
    */</span>
    <span class="keyword">return</span> <span class="literal">false</span>;
}
</code></pre><p>把添加注释的函数传递给template._getTmpl()，可以获得注释文本内容<code>fn.toString()</code>，等待下一步的模板解析。<br><strong>注意:</strong><br>a. 注释文本的开头需要添加感叹号！<br>b.注释后面需要添加return false;语句，否则将解析不到注释文本。</p>
<h3 id="template-compile()">template.compile()</h3><pre><code>function albumItemCompile () {
    <span class="keyword">return</span> <span class="keyword">template</span>.compile(function() {/*!
        &lt;li class=<span class="string">"album-item"</span>&gt;
            &lt;<span class="keyword">div</span> class=<span class="string">"ellipsis album-item-title"</span>&gt;&lt;% name %&gt;&lt;/<span class="keyword">div</span>&gt;
            &lt;<span class="keyword">div</span> class=<span class="string">"album-top"</span>&gt;
                &lt;<span class="keyword">div</span> class=<span class="string">"album-cover"</span>&gt;
                    &lt;img src=<span class="string">"&lt;% defCover %&gt;"</span> alt=<span class="string">""</span>&gt;
                    &lt;i class=<span class="string">"album-img"</span>&gt;&lt;/i&gt;
                &lt;/<span class="keyword">div</span>&gt;
            &lt;/<span class="keyword">div</span>&gt;
            &lt;<span class="keyword">div</span> class=<span class="string">"album-bottom"</span>&gt;
                &lt;<span class="keyword">div</span> class=<span class="string">"album-cover mask mask-cover"</span>&gt;
                    &lt;img src=<span class="string">"&lt;% defCover %&gt;"</span> alt=<span class="string">""</span>&gt;
                &lt;/<span class="keyword">div</span>&gt;
            &lt;/<span class="keyword">div</span>&gt;
        &lt;/li&gt;
    */
    <span class="keyword">return</span> <span class="literal">false</span>;
    });
}
</code></pre><p>对注释文本解析，返回能填充数据的编译函数。<br>可保存此函数，这样多次使用而只解析一次。常见的有列表项模板的编译函数。</p>
<h3 id="template-render()">template.render()</h3><pre><code><span class="keyword">var</span> d = <span class="keyword">template</span>.render(function() {/*!
    &lt;<span class="keyword">div</span> class=<span class="string">"album-data"</span>&gt;&lt;% data %&gt;&lt;/<span class="keyword">div</span>&gt;
*/
    <span class="keyword">return</span> <span class="literal">false</span>;
}, { data: data });
$('body').innerHtml = d;
</code></pre><p>返回填充了数据的html字符串。此函数可以用template(fn, data)代替。<br>参考链接：<br><a href="http://krasimirtsonev.com/blog/article/Javascript-template-engine-in-just-20-line" target="_blank" rel="external">JavaScript template engine in just 20 lines</a><br><a href="http://www.ghugo.com/function-multiline-text-in-comments/" target="_blank" rel="external">函数内巧用注释实现多行文本拼接</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>函数内巧用多行注释，实现js模板。<br>]]>
    
    </summary>
    
      <category term="iqiyi" scheme="http://mackxu.github.io/tags/iqiyi/"/>
    
      <category term="js" scheme="http://mackxu.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[rem 在项目中的简单使用]]></title>
    <link href="http://mackxu.github.io/2015/08/18/rem-simple-use/"/>
    <id>http://mackxu.github.io/2015/08/18/rem-simple-use/</id>
    <published>2015-08-18T13:24:59.000Z</published>
    <updated>2015-08-20T02:31:28.000Z</updated>
    <content type="html"><![CDATA[<p>在项目中重度使用rem<br><a id="more"></a><br>名词解释，rem: root em<br>实用的页面范围: 1280x720、1920x1080、3840x2160</p>
<h2 id="设置html的font_size">设置html的font size</h2><p>rem是相对的长度单位。页面中的所有元素可以相对于根元素(html)设置任何大小。<br>对html使用媒介查询适配不同屏幕：</p>
<pre><code><span class="tag">html</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">66.666px</span></span></span>; }</span>
<span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">1920px</span>) </span>{
    <span class="tag">html</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">100px</span></span></span>; }</span>
}
<span class="at_rule">@<span class="keyword">media</span> (min-width: <span class="number">3840px</span>) </span>{
    <span class="tag">html</span> <span class="rules">{ <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">200px</span></span></span>; }</span>
}
</code></pre><p>如果用在移动设备，上面的样式需要在页面head中设置：</p>
<pre><code>&lt;meta <span class="property">name</span>=<span class="string">"viewport"</span> content=<span class="string">"width=device-width"</span> /&gt;
</code></pre><p>把设备1920w下的html样式设置为100px，是为了编写样式的方便，保持了和设计师提供的效果图一样的宽度(关于为什么设置100px，是个人习惯)。因此可以简单地把其他两个宽度的下的html的大小计算出来。</p>
<h2 id="提示">提示</h2><p>在rem适配中，难免会有小数点出现。不好的是有些android设备会忽略小数位。这种情况在动画时，现象很明显。解决办法是，适配1280w，盒子的尺寸尽量设置能被3整除的数字。例如：</p>
<pre><code><span class="class">.album-item</span> <span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">2.91rem</span></span></span>;
}</span>
</code></pre><p>如果设置上面了的媒介查询代码，那么div.album-item的宽度在1920w下是291px, 1280w下是194px，同理3840w下是582px。<br>当然如果还是不精确，这是我们需要对1280w单独用px做适配，仅此而已。</p>
<p>参看资料:<br><a href="http://www.w3cplus.com/css3/define-font-size-with-css3-rem" target="_blank" rel="external">http://www.w3cplus.com/css3/define-font-size-with-css3-rem</a><br><a href="http://isux.tencent.com/web-app-rem.html" target="_blank" rel="external">http://isux.tencent.com/web-app-rem.html</a><br><a href="http://www.html-js.com/article/2402" target="_blank" rel="external">http://www.html-js.com/article/2402</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在项目中重度使用rem<br>]]>
    
    </summary>
    
      <category term="css" scheme="http://mackxu.github.io/tags/css/"/>
    
      <category term="经验" scheme="http://mackxu.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[为图片添加半透明遮罩效果]]></title>
    <link href="http://mackxu.github.io/2014/09/04/image-overlay/"/>
    <id>http://mackxu.github.io/2014/09/04/image-overlay/</id>
    <published>2014-09-03T23:22:25.000Z</published>
    <updated>2015-08-20T02:31:33.000Z</updated>
    <content type="html"><![CDATA[<p>平时为图片添加半透明遮罩效果，我的做法如下：<br>利用标签i实现背景半透明遮罩。当鼠标hover时, 提高i的背景色透明度值<code>background-color: rgba(0, 0, 0, .6)</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"opacity-black-position"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/4601.jpg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>为html结构添加如下css样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 利用标签i实现背景半透明遮罩, 兼容性不好 */</span></span><br><span class="line"><span class="class">.opacity-black-position</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">460px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">460px</span></span></span>; <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>; &#125;</span></span><br><span class="line"><span class="class">.opacity-black-position</span> <span class="tag">i</span> <span class="rules">&#123; </span><br><span class="line">    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>; <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>; </span><br><span class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>; </span><br><span class="line">    <span class="rule"><span class="attribute">transition</span>:<span class="value"> background-color .<span class="number">5s</span></span></span>;  </span><br><span class="line">&#125;</span></span><br><span class="line"><span class="class">.opacity-black-position</span> <span class="rule"><span class="attribute">a</span>:<span class="value">hover i &#123; background-color: <span class="function">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">6</span>)</span></span>; &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="利用opacity简单实现">利用opacity简单实现</h2><p>昨天看到京东商品图片上的半透明黑色遮罩，是这样实现的。 </p>
<p>当hover时设置图片父容器a的半透明度0.4<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"opacity-black"</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"images/4601.jpg"</span> <span class="attribute">alt</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>为html结构添加如下css样式:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.opacity-black</span> <span class="rules">&#123; <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">460px</span></span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">460px</span></span></span>; <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#000</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.opacity-black</span> <span class="tag">a</span> <span class="rules">&#123; <span class="rule"><span class="attribute">transition</span>:<span class="value"> opacity .<span class="number">5s</span></span></span>; <span class="rule"><span class="attribute">opacity</span>:<span class="value"> <span class="number">1</span></span></span>; &#125;</span></span><br><span class="line"><span class="class">.opacity-black</span> <span class="rule"><span class="attribute">a</span>:<span class="value">hover &#123; opacity: <span class="number">0.4</span></span></span>; &#125;</span><br></pre></td></tr></table></figure></p>
<p>通过降低自身及子标签img的透明度来显示父辈容器的背景色, 达到的效果和上面是一样一样的。</p>
<p><strong>狠狠滴点这里(演示):</strong> <a href="http://codepen.io/mackxu/pen/mJtvh" target="_blank" rel="external">http://codepen.io/mackxu/pen/mJtvh</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>平时为图片添加半透明遮罩效果，我的做法如下：<br>利用标签i实现背景半透明遮罩。当鼠标hover时, 提高i的背景色透明度值<code>background-color: rgba(0, 0, 0, .6)</code><br><figure class="highlig]]>
    </summary>
    
      <category term="css" scheme="http://mackxu.github.io/tags/css/"/>
    
      <category term="工作经验" scheme="http://mackxu.github.io/tags/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[顺序表查找算法及其优化]]></title>
    <link href="http://mackxu.github.io/2014/09/01/sequential-search/"/>
    <id>http://mackxu.github.io/2014/09/01/sequential-search/</id>
    <published>2014-09-01T09:27:21.000Z</published>
    <updated>2015-08-20T02:31:33.000Z</updated>
    <content type="html"><![CDATA[<p>顺序查找算法实现如下:</p>
<pre><code>var arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]
    , sequentialSearch = function(arr, val) {
        var i = <span class="number">0</span>
            , len = arr.length;
        <span class="keyword">for</span> ( ; i &lt; len; i++) {             <span class="comment">// 比较一次</span>
            <span class="keyword">if</span> (arr[i] === val) {           <span class="comment">// 比较二次</span>
                <span class="keyword">return</span> i;
            }
        }
        <span class="keyword">return</span> i;                           <span class="comment">// 返回len,则说明查找失败</span>
    }
</code></pre><p>这里并不是足够完美, 因为每次循环时都需要对i是否越界, 即是否小于len做判断。事实上，还可以有更好的办法，设置一个哨兵, 就可以解决不需要每次让i与len做比较了。</p>
<h2 id="顺序表查找优化">顺序表查找优化</h2><pre><code><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">1</span>]
    <span class="comment">// 有哨兵的顺序表查找</span>
    , sequentialSearchOpt = function(arr, <span class="function"><span class="keyword">val</span>) {</span>
        <span class="keyword">var</span> i = <span class="number">0</span>
            , arr = arr.slice(<span class="number">0</span>)            <span class="comment">// 保证函数内操作不影响外部的arr数组 </span>
            , len = arr.length;
        arr[len] = <span class="function"><span class="keyword">val</span>;</span>                     <span class="comment">// 设置arr[len]为关键字值作为哨兵</span>
        <span class="comment">// arr.push(val);</span>
        <span class="keyword">while</span> (arr[i] !== <span class="function"><span class="keyword">val</span>) {</span>            <span class="comment">// 比较一次</span>
            i++;
        }
        <span class="keyword">return</span> i;                           <span class="comment">// 返回len,则说明查找失败</span>
    }
</code></pre><p>如果arr[i]中有值等于val则返回i，否则一定会在循环结束处等于val, 此时返回len值。说明数组中没有关键字等于val,查找失败。</p>
<blockquote>
<p>在测试过程中, 发现因为由于对象是按地址传递的，在函数中改变数组<code>arr[len] = val</code>会影响到外部的数组，因此需要在函数内clone一份数组出来</p>
</blockquote>
<p>这种在查找方向的尽头设置‘哨兵’免去了在查找过程中每一次比较后都要判断查找位置是否越界的小技巧，看似与原先差别不大，但在总数较多时，效率提高很大，是非常好的编程技巧。</p>
<p><strong>参考：</strong> 大话数据结构 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>顺序查找算法实现如下:</p>
<pre><code>var arr = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span ]]>
    </summary>
    
      <category term="优化" scheme="http://mackxu.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="算法" scheme="http://mackxu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[google-analytics的使用 解析页面引入代码]]></title>
    <link href="http://mackxu.github.io/2014/08/22/analyticsjs/"/>
    <id>http://mackxu.github.io/2014/08/22/analyticsjs/</id>
    <published>2014-08-22T08:16:07.000Z</published>
    <updated>2015-08-21T02:15:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="代码整理和注释">代码整理和注释</h2><pre><code><span class="comment">// 创建ga()方法, 加载analytics.js文件</span>
<span class="comment">// a, m 作为形参，确保下面的执行不会修改外部的同名变量</span>
(function(<span class="keyword">win</span>, doc, o, <span class="keyword">g</span>, ga, a , <span class="keyword">m</span>){

    <span class="keyword">win</span>['GoogleAnalyticsObject'] = ga;      <span class="comment">// 向外暴露出ga对象</span>
    <span class="comment">// 确保只执行一次analytics.js的插入</span>
    <span class="keyword">win</span>[ga] = <span class="keyword">win</span>[ga] || function() {

        (<span class="keyword">win</span>[ga].q = <span class="keyword">win</span>[ga].q || []).push(arguments)},
        <span class="keyword">win</span>[ga].<span class="keyword">l</span> = 1 * new <span class="literal">Date</span>();         <span class="comment">// 把时间格式转换成数字型</span>

        <span class="comment">// 动态加载analytics.js</span>
        a = doc.createElement(o),
        <span class="keyword">m</span> = doc.getElementsByTagName(o)[0]; <span class="comment">// script</span>
        a.async = 1;
        a.src = <span class="keyword">g</span>;
        <span class="keyword">m</span>.parentNode.insertBefore(a, <span class="keyword">m</span>);
})(<span class="keyword">window</span>, document, 'script','<span class="comment">//www.google-analytics.com/analytics.js','ga');</span>
</code></pre><p>短短的代码, 还是蛮有货的，呵呵。   </p>
<h2 id="压缩的代码">压缩的代码</h2><pre><code><span class="list">(<span class="keyword">function</span><span class="list">(<span class="keyword">i</span>,s,o,g,r,a,m)</span><span class="collection">{i<span class="collection">['GoogleAnalyticsObject']</span>=r;i<span class="collection">[r]</span>=i<span class="collection">[r]</span>||function<span class="list">()</span><span class="collection">{<span class="list">(<span class="keyword">i</span><span class="collection">[r]</span>.q=i<span class="collection">[r]</span>.q||<span class="collection">[]</span>)</span>.push<span class="list">(<span class="keyword">arguments</span>)</span>}</span>,i<span class="collection">[r]</span>.l=1*new Date<span class="list">()</span><span class="comment">;a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,'script','//www.google-analytics.com/analytics.js','ga');</span></span></span>
</code></pre><p>参考: <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/advanced?hl=zh-TW" target="_blank" rel="external">https://developers.google.com/analytics/devguides/collection/analyticsjs/advanced?hl=zh-TW</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="代码整理和注释">代码整理和注释</h2><pre><code><span class="comment">// 创建ga()方法, 加载analytics.js文件</span>
<span class="comment">// a, m 作为形参，确保下面的执]]>
    </summary>
    
      <category term="工具" scheme="http://mackxu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS数组去重比较]]></title>
    <link href="http://mackxu.github.io/2014/07/21/array-unique/"/>
    <id>http://mackxu.github.io/2014/07/21/array-unique/</id>
    <published>2014-07-20T23:58:53.000Z</published>
    <updated>2015-08-20T02:31:33.000Z</updated>
    <content type="html"><![CDATA[<p>数组去重复是一个常见的需求，我们暂时考虑同类型的数组去重复。主要是理清思路和考虑执行性能。<br><a id="more"></a></p>
<h2 id="for循环删除后面重复的">for循环删除后面重复的</h2><pre><code><span class="keyword">var</span> uniqueFor = <span class="function"><span class="keyword">function</span><span class="params">(arr)</span> </span>{
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) {
        <span class="keyword">var</span> item = arr[i];
        <span class="keyword">for</span>(<span class="keyword">var</span> j = i+<span class="number">1</span>; j &lt; arr.length; j++ ) {
            item === arr[j] &amp;&amp; (arr.splice(j, <span class="number">1</span>), j--);
        }
    };
    <span class="keyword">return</span> arr;
};
</code></pre><h2 id="判断对象属性">判断对象属性</h2><pre><code><span class="keyword">var</span> uniqueObject = <span class="function"><span class="keyword">function</span><span class="params">(arr)</span> </span>{
    <span class="keyword">var</span> v, r = [], o = {};
    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; (v = arr[i]) !== <span class="literal">undefined</span>; i++) {
        !o[v] &amp;&amp; (r.push(v), o[v] = <span class="literal">true</span>);
    }
    <span class="keyword">return</span> r;
};
</code></pre><h2 id="数组过滤重复项filter">数组过滤重复项filter</h2><pre><code><span class="keyword">var</span> uniqueFilter = <span class="function"><span class="keyword">function</span><span class="params">(arr)</span> </span>{
    <span class="keyword">return</span> arr.filter(<span class="function"><span class="keyword">function</span><span class="params">(elem, pos, self)</span> </span>{
        <span class="comment">// 如果没有重复项，返回true</span>
        <span class="keyword">return</span> <span class="keyword">self</span>.indexOf(elem, pos + <span class="number">1</span>) === -<span class="number">1</span>;
    });
};
</code></pre><h2 id="比较执行效率">比较执行效率</h2><p><img src="http://qnimg.qiniudn.com/140721/chrome-unique.png" alt=""><strong>图1 chrome浏览器</strong></p>
<p><img src="http://qnimg.qiniudn.com/140721/ff-unique.png" alt=""><strong>图2 firefox浏览器</strong></p>
<p><img src="http://qnimg.qiniudn.com/140721/chrome-unique.png" alt=""><strong>图3 IE浏览器</strong></p>
<p><em>参考文献</em><br><a href="http://jsperf.com/quchong/5" target="_blank" rel="external">http://jsperf.com/quchong/5</a><br><a href="http://www.nowamagic.net/javascript/js_RemoveRepeatElement.php" target="_blank" rel="external">http://www.nowamagic.net/javascript/js_RemoveRepeatElement.php</a><br><a href="http://blog.segmentfault.com/fishenal/1190000000418858" target="_blank" rel="external">http://blog.segmentfault.com/fishenal/1190000000418858</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>数组去重复是一个常见的需求，我们暂时考虑同类型的数组去重复。主要是理清思路和考虑执行性能。<br>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://mackxu.github.io/tags/javascript/"/>
    
      <category term="性能优化" scheme="http://mackxu.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
